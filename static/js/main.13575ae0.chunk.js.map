{"version":3,"sources":["Task.js","App.js","serviceWorker.js","index.js"],"names":["Task","name","completed","this","props","task","index","onClick","toggleCompleted","className","renderClassNames","renderName","delete","Component","App","state","tasks","console","log","localStorage","getItem","setState","push","splice","setItem","class","onSubmit","e","preventDefault","taskInput","document","getElementById","value","created","Date","addTask","type","id","placeholder","aria-label","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOAmCeA,E,mLA/BAC,EAAMC,GACb,OAAOA,EAAY,4BAAI,6BAAMD,IAAmB,4BAAKA,K,uCAGxCC,GACb,OAAOA,EAAY,+BAAiC,4B,+BAG9C,IAAD,SACmBC,KAAKC,MAArBC,EADH,EACGA,KAAMC,EADT,EACSA,MACNL,EAAoBI,EAApBJ,KAAMC,EAAcG,EAAdH,UAGd,OAAO,wBACHK,QAAS,WACL,EAAKH,MAAMI,gBAAgBF,IAE/BG,UAAWN,KAAKO,iBAAiBR,IAChCC,KAAKQ,WAAWV,EAAMC,GACvB,wBACIO,UAAU,uBACVF,QAAS,WACL,EAAKH,MAAMQ,OAAON,KAGtB,0BAAMG,UAAU,oC,GA3BbI,aCiGJC,E,YA7Fb,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KAEDW,MAAQ,CACTC,MAAO,IAJM,E,iFAWjBC,QAAQC,IAAIC,aAAaC,QAAQ,Y,sCAQnBd,GACdH,KAAKkB,UAAS,SAACN,GACb,GAAGA,EAAMC,MAAMV,GACb,OAAOS,EAAMC,MAAMV,GAAOJ,WAAaa,EAAMC,MAAMV,GAAOJ,e,8BAKxDG,GACNF,KAAKkB,UAAS,SAACN,GACb,OAAOA,EAAMC,MAAMM,KAAKjB,Q,6BAIrBC,GACLH,KAAKkB,UAAS,SAACN,GACb,OAAOA,EAAMC,MAAMO,OAAOjB,EAAO,Q,+BAM3B,IAAD,OAIP,OAFAa,aAAaK,QAAQ,QAASrB,KAAKY,OAGjC,yBAAKU,MAAM,OACT,yBAAKA,MAAM,sCACT,wBAAIA,MAAM,wBAAV,QAEE,yBAAKA,MAAM,oCACT,0BAAMC,SAAU,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAYC,SAASC,eAAe,aAClC1B,EAAO,CACXJ,KAAM4B,EAAUG,MAChB9B,WAAW,EACX+B,QAAS,IAAIC,MAEf,EAAKC,QAAQ9B,GACbwB,EAAUG,MAAQ,KAEpB,2BAAOI,KAAK,OAAOC,GAAG,YAAYZ,MAAM,eAAea,YAAY,WAAWC,aAAW,gBAI/F,2BAAOd,MAAM,oBACX,+BACGtB,KAAKY,MAAMC,MAAMwB,KAAI,SAACnC,EAAMoC,GAC3B,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLpC,KAAMA,EACNC,MAAOmC,EACPjC,gBAAiB,SAACF,GAChB,EAAKE,gBAAgBF,IAEvBM,OAAQ,SAACN,GACP,EAAKM,OAAON,iB,GAhFhBO,aCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASC,eAAe,SD6H3C,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.13575ae0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Task extends Component {\n\n    renderName(name, completed) {\n        return completed ? <td><del>{name}</del></td> : <td>{name}</td>\n    }\n\n    renderClassNames(completed) {\n        return completed ? 'bg-four text-dark text-muted' : 'bg-two font-weight-bold'\n    }\n\n    render() {\n        const { task, index } = this.props\n        const { name, completed } = task\n\n        \n        return <tr \n            onClick={() => {\n                this.props.toggleCompleted(index)\n            }}\n            className={this.renderClassNames(completed)}>\n            {this.renderName(name, completed)}\n            <td\n                className=\"float-right col-md-2\"\n                onClick={() => {\n                    this.props.delete(index)\n                }}\n            >\n                <span className=\"fas fa-times offset-md-10\" />\n            </td>\n        </tr>\n    }\n}\n\nexport default Task;\n","import React, { Component } from 'react';\nimport Task from './Task';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        tasks: []\n      }\n    \n  }\n\n  componentDidMount() {\n    \n    console.log(localStorage.getItem('tasks'));\n    // if(localStorage.getItem('tasks')) {\n    //   this.setState(() => {\n    //     return JSON.parse(localStorage.getItem('tasks'))\n    //   })\n    // }\n  }\n\n  toggleCompleted(index) {\n    this.setState((state) => {\n      if(state.tasks[index]) {\n        return state.tasks[index].completed = !state.tasks[index].completed;\n      }\n    });\n  }\n\n  addTask(task) {\n    this.setState((state) => {\n      return state.tasks.push(task);\n    });\n  }\n\n  delete(index) {\n    this.setState((state) => {\n      return state.tasks.splice(index, 1);\n    });\n  }\n\n\n\n  render() {\n\n    localStorage.setItem('tasks', this.state);\n    \n    return (\n      <div class=\"App\">\n        <div class=\"col-md-8 offset-md-2 p-0 mt-4 pt-4\">\n          <h2 class=\"text-white mt-4 pt-4\">\n            Tasks\n            <div class=\"input-group col-md-6 float-right\">\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                const taskInput = document.getElementById('taskInput');\n                  const task = {\n                    name: taskInput.value,\n                    completed: false,\n                    created: new Date()\n                  }\n                  this.addTask(task)\n                  taskInput.value = '';\n              }}>\n                <input type=\"text\" id=\"taskInput\" class=\"form-control\" placeholder=\"Add task\" aria-label=\"Add task\" />\n              </form>\n            </div>\n          </h2>\n          <table class=\"table table-dark\">\n            <tbody>\n              {this.state.tasks.map((task, i) => {\n                return (\n                  <Task \n                    key={i}\n                    task={task}\n                    index={i}\n                    toggleCompleted={(index) => {\n                      this.toggleCompleted(index)\n                    }}\n                    delete={(index) => {\n                      this.delete(index)\n                    }}\n                  />)\n              })}\n            </tbody>\n          </table>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}